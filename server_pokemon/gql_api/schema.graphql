type Query {
    hello: String!
    """
    Получение покемона по ID
    """
    getPokemon(id: ID!): Pokemon!
    """
    Получение покемонов по критериям, без критериев возвращает список всех покемонов
    """
    getPokemons(input: GetPokemonsInput): [Pokemon!]!
}

input GetPokemonsInput {
    """
    Сортировка
    """
    sort: [Field],
    """
    Фильтрация
    """
    filter: FilterInput,
    """
    Поиск
    """
    search: SearchInput
}

input FilterInput {
    name: String
    type: PokemonType
    stats: StatInput
}

input StatInput {
    maxCP: Int
    baseAttack: Int
    baseDefense: Int
    baseStamina: Int
    mode: FiltrationMode
}

enum FiltrationMode {
    """
    Режим выборки значений =, < или >
    """
    EQUALS
    LESS_THAN
    GREATER_THAN
}


input SearchInput {
    name: String!
}


enum Field {
    id
    name
    height
    weight
    max_cp
    base_attack
    base_defense
    base_stamina
    primary_type
    secondary_type
    stage
}


enum PokemonType {
    Normal
    Fire
    Water
    Grass
    Electric
    Ice
    Fighting
    Poison
    Ground
    Flying
    Psychic
    Bug
    Rock
    Dark
    Dragon
    Steel
    Ghost
    Fairy
}

enum Gender {
    MALE
    FEMALE
}

type Evolution {
    from: Pokemon
    to: [Pokemon]!
    """
    Пол покемона из поля from, требуемый для эволюции
    """
    gender: Gender
}

type EvolutionStage {
    stageCount: Int!
    pokemons: [Pokemon!]!
}

type Branch {
    stages: EvolutionStage!
}

type Pokemon {
    id: ID!
    name: String!
    height: Int!
    weight: Int!
    maxCP: Int!
    familyName: String!
    baseAttack: Int!
    baseDefense: Int!
    baseStamina: Int!
    primaryType: PokemonType!
    secondaryType: PokemonType
    evolution: Evolution
    description: String
    #    evolutionBranch: Branch!
}